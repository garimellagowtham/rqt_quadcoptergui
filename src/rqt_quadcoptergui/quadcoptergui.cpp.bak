2/*
 * Copyright (c) 2011, Dorian Scholz, TU Darmstadt
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the TU Darmstadt nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "quadcoptergui.h"

#include <pluginlib/class_list_macros.h>

namespace rqt_quadcoptergui {

QuadcopterGui::QuadcopterGui() : rqt_gui_cpp::Plugin()
  , context_(0)
  , widget_(0)
	, goalcount(0)
	{
		setObjectName("QuadcopterGui");
		parser_loader.reset(new pluginlib::ClassLoader<rqt_quadcoptergui::Parser>("rqt_quadcoptergui","rqt_quadcoptergui::Parser"));
		UV_O.setIdentity();
		errorrpy.setValue(0,0,0);
	}

QuadcopterGui::~QuadcopterGui()
{
  
}

void QuadcopterGui::initPlugin(qt_gui_cpp::PluginContext& context)
{
	widget_ = new QWidget();
	ui_.setupUi(widget_); 


	context_ = &context;

	widget_->setWindowTitle("Quadcoptergui[*]");

	if (context.serialNumber() != 1)
	{
		widget_->setWindowTitle(widget_->windowTitle() + " (" + QString::number(context.serialNumber()) + ")");
	}

	context.addWidget(widget_);

	// trigger deleteLater for plugin when widget or frame is closed
	widget_->installEventFilter(this);

	//set ui textbrowser to be read only:
	ui_.textBrowser->setReadOnly(true);

	//Get ros NodeHandle from parent nodelet manager:
	ros::NodeHandle nh = getNodeHandle();

	//stringdata_pub = nh.advertise<std_msgs::String>("stringout",1);

	try
	{
		string parserplugin_name;
		if(!nh.getParam("/parser_plugin",parserplugin_name))
		{
			ROS_ERROR("Cannot find parser_plugin parameter to load the parser");
			return;
		}
		parserinstance = parser_loader->createInstance(parserplugin_name);
		parserinstance->initialize(nh);
	}
	catch(pluginlib::PluginlibException& ex)
	{
		ROS_ERROR("The plugin failed to load for some reason. Error: %s", ex.what());
	}

	//Connect all the slots as needed

	//Setup the timer:
	timer = new QTimer(widget_);
	connect(timer, SIGNAL(timeout()), this, SLOT(RefreshGui()));
	timer->start(50);//20Hz

	connect(ui_.Takeoffbutton, SIGNAL(clicked()), this, SLOT(wrappertakeoff()));
	connect(ui_.Landbutton, SIGNAL(clicked()), this, SLOT(wrapperLand()));
	connect(ui_.Disarmbutton, SIGNAL(clicked()), this, SLOT(wrapperDisarm()));
	connect(ui_.imucheckbox,SIGNAL(stateChanged(int)),this,SLOT(wrapperimu_recalib(int)));
	connect(ui_.thrust_estcheckbox,SIGNAL(stateChanged(int)),this,SLOT(wrapper_estthrustbias(int)));
	//connect(ui_.ctrlcheckbox,SIGNAL(stateChanged(int)),this,SLOT(switchctrlr(int)));
	//Create a controller instance from the controllers library:
	ctrlrinst.reset(new SetptCtrl(nh));
	parserinstance->getquaddata(data);
	ctrlrinst->setextbias(data.thrustbias); //Fext initial guess comes from the parser. We will need to estimate it for some quadcopters if its used in commanding it i.e quadcopter does not provide the gravity compensation by itself.
	//subscribe to vrpndata for now
	string uav_posename;
	if(!nh.getParam("/vrpn_pose",uav_posename))
	{
		ROS_ERROR("Cannot load uav pose parameter");
		return;
	}
	vrpndata_sub = nh.subscribe(uav_posename,1,&QuadcopterGui::cmdCallback,this);

	//Connect to dynamic reconfigure server:
	reconfigserver.reset(new dynamic_reconfigure::Server<rqt_quadcoptergui::QuadcopterInterfaceConfig>(nh));
  reconfigcallbacktype = boost::bind(&QuadcopterGui::paramreqCallback, this, _1, _2);
  reconfigserver->setCallback(reconfigcallbacktype);
	//Create timer for moving Goal Dynamically:
	goaltimer = nh.createTimer(ros::Duration(1), &QuadcopterGui::goaltimerCallback,this);
	goaltimer.start();
}

void QuadcopterGui::RefreshGui()
{
	if(!parserinstance)
	{
		ROS_ERROR("No parser instance created");
		return;
	}
	parserinstance->getquaddata(data);
	Matrix3x3 rotmat = UV_O.getBasis();
	tf::Vector3 vrpnrpy;
	rotmat.getEulerYPR(vrpnrpy[2],vrpnrpy[1],vrpnrpy[0]);
	errorrpy = vrpnrpy - tf::Vector3(data.rpydata.x, data.rpydata.y,data.rpydata.z);
	tf::Vector3 quadorigin = UV_O.getOrigin();
	// Create a Text message based on the data from the Parser class
	sprintf(buffer,
			"Battery Percent: %2.2f\t\nTemperature: %2.2f\tPressure: %2.2f\tWindspeed: %2.2f\tAltitude: %2.2f\t\nRoll: %2.2f\tPitch %2.2f\tYaw %2.2f\nMagx: %2.2f\tMagy %2.2f\tMagz %2.2f\naccx: %2.2f\taccy %2.2f\taccz %2.2f\nvelx: %2.2f\tvely %2.2f\tvelz %2.2f\nposx: %2.2f\tposy: %2.2f\tposz: %2.2f\nvrpnr: %2.2f\tvrpnp: %2.2f\tvrpny: %2.2f\nErrorr: %2.2f\tErrorrp: %2.2f\tErrory: %2.2f\nresr: %2.2f\tresp: %2.2f\tresy: %2.2f\trest: %2.2f\nMass: %2.2f\tTimestamp: %2.2f\t\nQuadState: %s", 
			data.batterypercent
			,data.temperature,data.pressure
			,data.wind_speed, data.altitude
			,data.rpydata.x*(180/M_PI),data.rpydata.y*(180/M_PI),data.rpydata.z*(180/M_PI)
			,data.magdata.x,data.magdata.y,data.magdata.z
			,data.linacc.x,data.linacc.y,data.linacc.z
			,data.linvel.x,data.linvel.y,data.linvel.z
			,quadorigin[0], quadorigin[1], quadorigin[2]
			,vrpnrpy[0]*(180/M_PI),vrpnrpy[1]*(180/M_PI),vrpnrpy[2]*(180/M_PI)
			,errorrpy[0]*(180/M_PI),errorrpy[1]*(180/M_PI),errorrpy[2]*(180/M_PI)
			, (rescmdmsg.x)*(180/M_PI), (rescmdmsg.y)*(180/M_PI), rescmdmsg.z*(180/M_PI), rescmdmsg.w
			,data.mass,data.timestamp,data.quadstate.c_str());
			//, (rescmdmsg.x-data.rpydata.x)*(180/M_PI), (rescmdmsg.y-data.rpydata.y)*(180/M_PI), rescmdmsg.z*(180/M_PI), rescmdmsg.w

	//Also  add status about the vrpn data and controller errors etc

	QString msg = QString::fromStdString(buffer);
	ui_.textBrowser->setPlainText(msg);
}

/*void QuadcopterGui::StringCallback(const std_msgs::String::ConstPtr &stringdata)
{
	ROS_INFO("Hello");
	qgui_mutex_.lock();
	str =  QString::fromStdString(stringdata->data);
	qgui_mutex_.unlock();
	std_msgs::String stringpubdata;
	stringpubdata.data = stringdata->data;
	stringdata_pub.publish(stringpubdata);
	refreshtext = true;
}
*/


bool QuadcopterGui::eventFilter(QObject* watched, QEvent* event)
{
  if (watched == widget_ && event->type() == QEvent::Close)
  {
		ROS_INFO("Closing...");
    event->ignore();
    context_->closePlugin();
		//stringdata_sub.shutdown();
    return true;
  }
	return QObject::eventFilter(watched, event);
}

void QuadcopterGui::wrappertakeoff()
{
	if(!parserinstance)
	{
		ROS_WARN("Parser Instance not defined. Cannot take off");
		return;
	}
	parserinstance->takeoff();
}

void QuadcopterGui::wrapperLand()
{
	if(!parserinstance)
	{
		ROS_WARN("Parser Instance not defined. Cannot take off");
		return;
	}
	parserinstance->land();
}

void QuadcopterGui::wrapperDisarm()
{
	if(!parserinstance)
	{
		ROS_WARN("Parser Instance not defined. Cannot take off");
		return;
	}
	parserinstance->disarm();
}
void QuadcopterGui::wrapper_estthrustbias(int state)
{
	if(!parserinstance)
	{
		ROS_WARN("Parser Instance not defined. Cannot take off");
		return;
	}
	if(state == Qt::Checked)
	{
		parserinstance->estimatethrustbias();
		ui_.thrust_estcheckbox->setCheckState(Qt::Unchecked);
	}
}

void QuadcopterGui::wrapperimu_recalib(int state)
{
	if(!parserinstance)
	{
		ROS_WARN("Parser Instance not defined. Cannot take off");
		return;
	}
	if(state == Qt::Checked)
	{
		parserinstance->calibrateimubias();
		ui_.imucheckbox->setCheckState(Qt::Unchecked);
	}
}


void QuadcopterGui::shutdownPlugin()
{
	parserinstance.reset();
	parser_loader.reset();
	ctrlrinst.reset();
	vrpndata_sub.shutdown();
	reconfigserver.reset();
	goaltimer.stop();
	  //stringdata_sub.shutdown();
	  //stringdata_pub.shutdown();
}

void QuadcopterGui::cmdCallback(const geometry_msgs::TransformStamped::ConstPtr &currframe)
{
/*	if(data.quadstate != "Flying")
	{
		transformStampedMsgToTF(*currframe,UV_O);//converts to the right format 
		return;
	}
	*/

	//Call the ctrlr to set the ctrl and then send the command to the quadparser
	if(!ctrlrinst)
	{
		ROS_WARN("Controller not instantiated");
		return;
	}
	controllers::ctrl_command rescmd;
  transformStampedMsgToTF(*currframe,UV_O);//converts to the right format 
	//Store the current position of the quadcopter for display
	//ctrlrinst->Set(UV_O, rescmd);
	ctrlrinst->Set(UV_O, errorrpy, rescmd);
	if(!parserinstance)
	{
		ROS_WARN("Parser not instantiated");
		return;
	}
	rescmdmsg.x = rescmd.roll; rescmdmsg.y = rescmd.pitch; rescmdmsg.z = rescmd.rateyaw; rescmdmsg.w = rescmd.thrust;
	if(data.armed)
	{
		parserinstance->cmdrpythrust(rescmdmsg);
		//ROS_INFO("Setting cmd");
	}
	//Set the altitude of the quadcopter in the data
	parserinstance->setaltitude(currframe->transform.translation.z);
//#ifdef PRINT
	//ROS_INFO("Rescmd: %f\t%f\t%f",rescmdmsg.x,rescmdmsg.y,rescmdmsg.w);
//#endif
}

void QuadcopterGui::paramreqCallback(rqt_quadcoptergui::QuadcopterInterfaceConfig &config , uint32_t level)
{
	//ROS_INFO("Request recvd");
	// Use the config values to set the goals and gains for quadcopter
	if(!parserinstance || !ctrlrinst)
	{
		ROS_WARN("Parser or ctrlr not defined");
		return;
	}
	tf::Vector3 quadorigin = UV_O.getOrigin();
	if(level&0x0002)
	{
		if(data.armed)
		{
			goalcount = config.goalT;
			diff_goal.setValue((-curr_goal[0] + config.xg)/goalcount, (-curr_goal[1] + config.yg)/goalcount,(-curr_goal[2] + config.zg)/goalcount);
			goaltimer.start();
		}
		else
		{
			config.xg = quadorigin[0];
			config.yg = quadorigin[1];
			config.zg = quadorigin[2];
			curr_goal = quadorigin;

			goalcount = 1;
			diff_goal.setValue(0,0,0);
			goaltimer.start();
			//diff_goal.setValue(0, 0, (-curr_goal[2] + config.zg)/goalcount);
		}
	}
	ctrlrinst->setgains(config.kpr, config.kdr, config.kpt, config.kdt);
	ctrlrinst->setbounds(config.throtbound, (M_PI/180.0)*config.rpbound);//This throttle bound is different from throttle bias which needs to be estimated for some quadcopters. This just cuts off the throttle values that are beyond thrustbias +/- throtbound
}

void QuadcopterGui::goaltimerCallback(const ros::TimerEvent &event)
{
	//if(data.quadstate == "Flying")
	//{
		if(goalcount > 0)
		{
			curr_goal = curr_goal + diff_goal;
			if(!ctrlrinst)
			{
				ROS_WARN("Controller not instantiated");
				return;
			}
			ctrlrinst->setgoal(curr_goal[0],curr_goal[1],curr_goal[2]);
			goalcount--;
		}
		else
		{
			goaltimer.stop();
		}
	//}
}
}
PLUGINLIB_DECLARE_CLASS(rqt_quadcoptergui, QuadcopterGui, rqt_quadcoptergui::QuadcopterGui, rqt_gui_cpp::Plugin)
