#! /usr/bin/env python
# Create a cfg file for getting control parameters for dmoc optimal controller

PACKAGE = 'rqt_quadcoptergui'

from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()

#       Name                      , Type     , Reconfiguration level , Description                               , Default , Min  , Max
gen.add("vx"                      , double_t , 0                     , "Velocity x"                              , 0.0     , -10   , 10	)
gen.add("vy"                      , double_t , 0                     , "Velocity y"                              , 0.0     , -10   , 10	)
gen.add("vz"                      , double_t , 0                     , "Velocity z"                              , 0.0     , -4   , 4	)
gen.add("yaw"                     , double_t , 0                     , "Yaw"                                     , 0.0     , -3.1 , 3.1	)
gen.add("update_vel"              , bool_t   , 0x0002                , "Update Goal "                            , False)
gen.add("Nit"                     , int_t    , 0                     , "MPC Number of iterations"                , 10      , 1    , 20	)
gen.add("goal_altitude"           , double_t , 0                     , "Goal Yaw in Waypoint control"            , 10      , 0.2  , 50)
gen.add("radial_gain"             , double_t , 0                     , "Radial Gain for roi controller"          , 0.5     , 0.0  , 2	)
gen.add("tangential_gain"         , double_t , 0                     , "Tangential gain for roi controller"      , 0.5     , 0.0  , 2	)
gen.add("desired_object_distance" , double_t , 0                     , "desired quadcopter distance from object" , 1.0     , 0.5  , 2	)
gen.add("kp_trajectory_tracking"  , double_t , 0                     , "Proportional gain on trajectory tracker" , 1.0     , 0.5  , 2	)
gen.add("kp_velctrl"              , double_t , 0                     , "Proportional gain on Velocity tracker"   , 1.0     , 0.5  , 10	)
gen.add("ki_velctrlxy"            , double_t , 0                     , "Integral gain on Velocity tracker"       , 0.001   , 0.001, 0.2 )
gen.add("ki_velctrlz"             , double_t , 0                     , "Integral gain on Velocity tracker"       , 0.001   , 0.001, 0.3 )
gen.add("go_home"                 , bool_t   , 0                     , "Go Home"                                 , False)
gen.add("record_home"             , bool_t   , 0                     , "Go Home"                                 , False)
gen.add("mpc_closed_loop"         , bool_t   , 0                     , "MPC Mode"                                , False)
gen.add("reset_controls"          , bool_t   , 0                     , "MPC Controls reset"                      , False)
gen.add("mpc_velmag"              , double_t , 0                     , "Velocity for MPC"                        , 0       , -2   , 2)
#gen.add("mpc_goalx"               , double_t , 0                     , "Goal Position x for MPC"                 , 0       , -6   , 6)
#gen.add("mpc_goaly"               , double_t , 0                     , "Goal Position y for MPC"                 , 0       , -6   , 6)
#gen.add("mpc_goalz"               , double_t , 0                     , "Goal Position z for MPC"                 , 0       , 0   , 4)
#gen.add("mpc_goalyaw"             , double_t , 0                     , "Goal Yaw for MPC"                        , 0      , -3.1  , 3.1)
gen.add("delay_send_time"         , double_t , 0                     , "Rpy dummy time"                          , 0      , 0  , 1)
gen.add("power_off_arm"           , bool_t   , 0                     , "Power Off Arm "                          , False)
gen.add("fold_arm"                , bool_t   , 0                     , "Fold Arm "                               , False)
exit(gen.generate(PACKAGE , "Config" , "QuadcopterInterface"))
